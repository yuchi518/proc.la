@la.proc

/// alias
proc qq = la.proc.QQ;

/// big endian, network order

/// primary type
/// int, 32bits
/// long, 64bits
/// float, 32bits
/// double, 64bits
/// num, big number

/// raw type, stream type
raw r = h(0a020f04);
raw r = h(0a 02 0f 04);
raw r = b(00000001 00000010 00000011 000000100);
raw r = b(000000010000001000000011000000100);
raw r = o(377 377 377 377);
raw r = o(377377);

/// string type
string s = "abcd";
string v = "010203" x(010203) ""

/// container type: array & map
int[] v = [1, 2, 3, 4];
int[][] matrix = [[1,3,4],[2,3,4],[5,6,7]];
int[]{} map = {"key1":[1,2,3], "key2":[2,3,4"]};
map{"key1"}
matrix[0

/// var, it can be primary type, raw type, string type or container type
var a = 1;
var[] a = [1, "test"];

/// international string (option)
string s = i"key_of_description";

/// resource
/// raw:raw type, json:container type, bjson, string
load_res({"scheme":"file://path/to/filename", "where":"local", "type":"raw"});
save_res({"scheme":"file://path/to/filename", "where":"local", "content":var_obj});

@(key: math, add)
la add = (int a1, int a2): (int)
{
    return a1 + a2;
}

// proc compatibly
la add = (var in): (var)
{
    //if (in is array)
    if (in is int[])
    {
        int v = 0;
        for (v: in)
        {
            total += v;
        }
        return total;
    }

    return error("aaa");
}


la main = (in_data in): (out_data)
{
    la add2 = (int a1): (int)
    {
        return add(a1, 0);
    }

    if (in is array)
    {
        in[0] = 1;
    }
}
