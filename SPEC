@la.proc

/// alias
la.proc.QQ -> qq:la;

/// big endian, network order

/// primary type
/// int, 32bits
/// long, 64bits
/// float, 32bits
/// double, 64bits
/// num, big number

/// raw type, stream type
h(0a020f04) -> r:raw;
h(0a 02 0f 04) -> r:raw;
b(00000001 00000010 00000011 000000100) -> r:raw;
b(000000010000001000000011000000100) -> r:raw;
o(377 377 377 377) -> r:raw;
o(377377) -> r:raw;

/// string type
"abcd" -> s:string;
"010203" x(010203) "" -> s:string;

/// container type: array & map
[1, 2, 3, 4] -> v:int[];
[[1,3,4],[2,3,4],[5,6,7]] -> matrix:int[][];
{"key1":[1,2,3], "key2":[2,3,4"]} -> map:int[]{};
map{"key1"}


/// var, it can be primary type, raw type, string type or container type
1 -> a:var;
[1, "test"] -> a:var[];

/// international string (option)
i"key_of_description" -> s:string;

/// resource
/// raw:raw type, json:container type, bjson, string
{"scheme":"file://path/to/filename", "where":"local", "type":"raw"} --> load_res;
{"scheme":"file://path/to/filename", "where":"local", "content":var_obj} --> save_res;

@(key: math, add)
declare add:la
(int a1, int a2) -> {
    (a1 + a2) -> out;
} -> (int)

// proc compatibly
declare add:la
(var in) -> {
    if (in is int[])
    {
        0 -> total:int;
        for (in -> v:int)
        {
            total + v -> total;
        }
        total -> out;
    }

    "aaa" -> error;
} -> (var)

declare add2:la
(a:int, b:int) {
    a + b -> out;
} (int)


declare main:la
(in:var) -> {
    declare add2:la
    (a:int) -> {
        [a1, 0] -> add -> out;
    } -> (int);

    if (in is [])
    {
        1 -> in[0];
    }

    none -> out;
} -> (var)


declare main:la
(input:var) -> {

    (1) -> out;

    [1,2,3,4] --> (in:var) {

    } (var) --> out;


    [1~10] -> list:int[];

    list --> length --> size:int;
    while (; size != 0

} -> (var);

